(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('lodash'), require('xmlbuilder')) :
  typeof define === 'function' && define.amd ? define(['exports', 'lodash', 'xmlbuilder'], factory) :
  (global = global || self, factory(global.JSXXML = {}, global.lodash, global.xmlbuilder));
}(this, function (exports, _, xmlbuilder) { 'use strict';

  _ = _ && _.hasOwnProperty('default') ? _['default'] : _;
  xmlbuilder = xmlbuilder && xmlbuilder.hasOwnProperty('default') ? xmlbuilder['default'] : xmlbuilder;

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(source, true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(source).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  var isStringOrNumber = function isStringOrNumber(child) {
    return _.isString(child) || _.isNumber(child);
  };
  var joinChildren = function joinChildren() {
    var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    children = _.flattenDeep([children]);
    children = _.filter(children, function (s) {
      return !_.isNaN(s);
    });

    if (!_.every(children, isStringOrNumber)) {
      throw new Error('all child should be string or number');
    }

    return children.join('');
  };

  var normalizeChildren = function normalizeChildren(children) {
    return _.reduce(_.flatMapDeep(children), function (acc, child) {
      if (isStringOrNumber(child)) {
        if (acc.length === 0) {
          acc.push({
            '#text': "".concat(child)
          });
          return acc;
        }

        var lastChild = acc[acc.length - 1];

        if (_.has(lastChild, '#text')) {
          lastChild['#text'] = "".concat(lastChild['#text']).concat(child);
          return acc;
        } else {
          acc.push({
            '#text': "".concat(child)
          });
          return acc;
        }
      } else if (_.isObject(child)) {
        acc.push(child);
        return acc;
      }

      return acc;
    }, []);
  };

  var JSXXML = function JSXXML(type, attr) {
    for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      children[_key - 2] = arguments[_key];
    }

    if (_.isFunction(type)) {
      return type(_objectSpread2({}, attr, {}, children.length > 0 ? {
        children: children
      } : {}));
    }

    if (_.isString(type)) {
      children = normalizeChildren(children);
      attr = _.omitBy(attr, function (value, key) {
        return key.startsWith('__');
      });
      attr = _.mapKeys(attr, function (value, key) {
        return '@' + key;
      });
      return _defineProperty({}, type, [].concat(_toConsumableArray(_.isEmpty(attr) ? [] : [attr]), _toConsumableArray(children)));
    }

    throw new Error('type should be function or string');
  };

  var render = function render(jsx) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        xmldec = _ref.xmldec,
        doctype = _ref.doctype,
        createOptions = _ref.createOptions,
        endOptions = _ref.endOptions;

    return xmlbuilder.create(jsx, xmldec, doctype, _objectSpread2({}, createOptions, {
      separateArrayItems: true
    })).end(endOptions);
  };

  var CData = (function (_ref) {
    var children = _ref.children;
    return {
      '#cdata': joinChildren(children)
    };
  });

  var Comment = (function (_ref) {
    var children = _ref.children;
    return {
      '#comment': joinChildren(children)
    };
  });

  var Fragment = (function (_ref) {
    var _ref$children = _ref.children,
        children = _ref$children === void 0 ? [] : _ref$children;
    return _.flattenDeep([children]);
  });

  var Raw = (function (_ref) {
    var children = _ref.children;
    return {
      '#raw': joinChildren(children)
    };
  });

  exports.CData = CData;
  exports.Comment = Comment;
  exports.Fragment = Fragment;
  exports.JSXXML = JSXXML;
  exports.Raw = Raw;
  exports.render = render;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
